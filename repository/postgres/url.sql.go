// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: url.sql

package postgres_repo

import (
	"context"
	"time"
)

const checkShortUrl = `-- name: CheckShortUrl :one
select exists (select 1 from short_urls where short_url = $1 for update)
`

func (q *Queries) CheckShortUrl(ctx context.Context, shortUrl string) (bool, error) {
	row := q.queryRow(ctx, q.checkShortUrlStmt, checkShortUrl, shortUrl)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getLongUrl = `-- name: GetLongUrl :one
select long_url from short_urls where short_url = $1
`

func (q *Queries) GetLongUrl(ctx context.Context, shortUrl string) (string, error) {
	row := q.queryRow(ctx, q.getLongUrlStmt, getLongUrl, shortUrl)
	var long_url string
	err := row.Scan(&long_url)
	return long_url, err
}

const getShortUrlLength = `-- name: GetShortUrlLength :one
select length from short_url_length for update
`

func (q *Queries) GetShortUrlLength(ctx context.Context) (int32, error) {
	row := q.queryRow(ctx, q.getShortUrlLengthStmt, getShortUrlLength)
	var length int32
	err := row.Scan(&length)
	return length, err
}

const incrementShortUrlLength = `-- name: IncrementShortUrlLength :one
update short_url_length 
set 
    length = length + 1,
    last_update = now()
returning length
`

func (q *Queries) IncrementShortUrlLength(ctx context.Context) (int32, error) {
	row := q.queryRow(ctx, q.incrementShortUrlLengthStmt, incrementShortUrlLength)
	var length int32
	err := row.Scan(&length)
	return length, err
}

const insertShortUrl = `-- name: InsertShortUrl :exec
insert into short_urls (username, long_url, short_url)
values ($1, $2, $3)
`

type InsertShortUrlParams struct {
	Username string
	LongUrl  string
	ShortUrl string
}

func (q *Queries) InsertShortUrl(ctx context.Context, arg InsertShortUrlParams) error {
	_, err := q.exec(ctx, q.insertShortUrlStmt, insertShortUrl, arg.Username, arg.LongUrl, arg.ShortUrl)
	return err
}

const insertUrlVisits = `-- name: InsertUrlVisits :exec
insert into url_visits (short_url, visitor_ip, visited_at) 
values ($1, $2, $3)
`

type InsertUrlVisitsParams struct {
	ShortUrl  string
	VisitorIp string
	VisitedAt time.Time
}

func (q *Queries) InsertUrlVisits(ctx context.Context, arg InsertUrlVisitsParams) error {
	_, err := q.exec(ctx, q.insertUrlVisitsStmt, insertUrlVisits, arg.ShortUrl, arg.VisitorIp, arg.VisitedAt)
	return err
}
