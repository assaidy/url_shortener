// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.checkShortUrlStmt, err = db.PrepareContext(ctx, checkShortUrl); err != nil {
		return nil, fmt.Errorf("error preparing query CheckShortUrl: %w", err)
	}
	if q.checkUsernameStmt, err = db.PrepareContext(ctx, checkUsername); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUsername: %w", err)
	}
	if q.deleteUserByUsernameStmt, err = db.PrepareContext(ctx, deleteUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByUsername: %w", err)
	}
	if q.getShortUrlLengthStmt, err = db.PrepareContext(ctx, getShortUrlLength); err != nil {
		return nil, fmt.Errorf("error preparing query GetShortUrlLength: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.incrementShortUrlLengthStmt, err = db.PrepareContext(ctx, incrementShortUrlLength); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementShortUrlLength: %w", err)
	}
	if q.insertShortUrlStmt, err = db.PrepareContext(ctx, insertShortUrl); err != nil {
		return nil, fmt.Errorf("error preparing query InsertShortUrl: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.checkShortUrlStmt != nil {
		if cerr := q.checkShortUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkShortUrlStmt: %w", cerr)
		}
	}
	if q.checkUsernameStmt != nil {
		if cerr := q.checkUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUsernameStmt: %w", cerr)
		}
	}
	if q.deleteUserByUsernameStmt != nil {
		if cerr := q.deleteUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getShortUrlLengthStmt != nil {
		if cerr := q.getShortUrlLengthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShortUrlLengthStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.incrementShortUrlLengthStmt != nil {
		if cerr := q.incrementShortUrlLengthStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementShortUrlLengthStmt: %w", cerr)
		}
	}
	if q.insertShortUrlStmt != nil {
		if cerr := q.insertShortUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertShortUrlStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	checkShortUrlStmt           *sql.Stmt
	checkUsernameStmt           *sql.Stmt
	deleteUserByUsernameStmt    *sql.Stmt
	getShortUrlLengthStmt       *sql.Stmt
	getUserByUsernameStmt       *sql.Stmt
	incrementShortUrlLengthStmt *sql.Stmt
	insertShortUrlStmt          *sql.Stmt
	insertUserStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		checkShortUrlStmt:           q.checkShortUrlStmt,
		checkUsernameStmt:           q.checkUsernameStmt,
		deleteUserByUsernameStmt:    q.deleteUserByUsernameStmt,
		getShortUrlLengthStmt:       q.getShortUrlLengthStmt,
		getUserByUsernameStmt:       q.getUserByUsernameStmt,
		incrementShortUrlLengthStmt: q.incrementShortUrlLengthStmt,
		insertShortUrlStmt:          q.insertShortUrlStmt,
		insertUserStmt:              q.insertUserStmt,
	}
}
