// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"
)

const checkUsername = `-- name: CheckUsername :one
select exists (select 1 from users where username = $1 for update)
`

func (q *Queries) CheckUsername(ctx context.Context, username string) (bool, error) {
	row := q.queryRow(ctx, q.checkUsernameStmt, checkUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :execrows
delete from users where username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) (int64, error) {
	result, err := q.exec(ctx, q.deleteUserByUsernameStmt, deleteUserByUsername, username)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserByUsername = `-- name: GetUserByUsername :one
select username, hashed_password, created_at from users where username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(&i.Username, &i.HashedPassword, &i.CreatedAt)
	return i, err
}

const insertUser = `-- name: InsertUser :execrows
insert into users (username, hashed_password)
values ($1, $2)
on conflict (username) do nothing
`

type InsertUserParams struct {
	Username       string
	HashedPassword string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	result, err := q.exec(ctx, q.insertUserStmt, insertUser, arg.Username, arg.HashedPassword)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
